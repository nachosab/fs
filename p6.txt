#include <stdio.h>
#include <string.h>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <stdlib.h>

using namespace std;

class record
{
public:
    char name[20], usn[20], age[5], sem[5], branch[5];
} rec[20], found[20];

int no;
char st_name[20], st_ind[20];

void sortfile()
{
    record temp;
    int i, j;
    for (i = 0; i < no - 1; i++)
    {
        for (j = 0; j < no - i - 1; j++)
        {
            if (strcmp(rec[j].name, rec[j + 1].name) > 0)
            {
                temp = rec[j];
                rec[j] = rec[j + 1];
                rec[j + 1] = temp;
            }
        }
    }
}

void indexfile()
{
    fstream index, index2;
    index.open("secindex.txt", ios::out);
    index2.open("record.txt", ios::out);
    for (int i = 0; i < no; i++)
    {
        index << rec[i].name << "|" << rec[i].usn << "|" << i << "\n";
        index2 << i << "|" << rec[i].name << "|" << rec[i].usn << "|" << rec[i].age << "|" << rec[i].sem << "|" << rec[i].branch << "\n";
    }
    index.close();
    index2.close();
}

void retrieve_record(char *index)
{
    fstream file2;
    char name[20], usn[20], age[5], sem[5], branch[5], ind[5];
    file2.open("record.txt", ios::in);
    if (!file2)
    {
        cout << "ERR\n";
        exit(0);
    }
    for (int i = 0; i < no; i++)
    {
        file2.getline(ind, 5, '|');
        file2.getline(name, 20, '|');
        file2.getline(usn, 20, '|');
        file2.getline(age, 5, '|');
        file2.getline(sem, 5, '|');
        file2.getline(branch, 5, '\n');

        if (strcmp(ind, index) == 0)
        {
            cout << "USN\tNAME\tAGE\tSEM\tBRANCH\n";
            printf("\n%s\t%s\t%s\t%s\t%s\n", name, usn, age, sem, branch);
            break;
        }
    }
    file2.close();
}

void retrieve_details(char newname[])
{
    fstream file1;
    file1.open("secindex.txt", ios::in);
    int k = 0, i;
    char chusn[20], index[20][20];
    char name[20], usn[20], age[5], sem[5], branch[5], ind[5];
    for (i = 0; i < no; i++)
    {
        file1.getline(name, 20, '|');
        file1.getline(usn, 20, '|');
        file1.getline(ind, 5, '\n');
        if (strcmp(name, newname) == 0)
        {
            strcpy(found[k].name, name);
            strcpy(found[k].usn, usn);
            strcpy(index[k], ind);
            k++;
        }
    }
    file1.close();
    if (k == 1)
    {
        retrieve_record(index[0]);
        return;
    }
    else
    {
        cout << "Choose USN : ";
        for (i = 0; i < k; i++)
        {
            cout << "\nNAME : " << found[i].name << "\t USN : " << found[i].usn << "\n";
        }
    }
    cin >> chusn;
    for (i = 0; i < k; i++)
    {
        if (strcmp(chusn, found[i].usn) == 0)
        {
            retrieve_record(index[i]);
            return;
        }
    }
    cout << "invalid entry\n";
    return;
}

void delete_record(char *index2)
{
    fstream file1, file2;
    file2.open("record.txt", ios::in);
    char chusn[20], index[20][20];
    char name2[20], usn[20], age[5], sem[5], branch[5], ind[5];
    int k = 0, i;
    for (i = 0; i < no; i++)
    {
        file2.getline(ind, 5, '|');
        file2.getline(name2, 20, '|');
        file2.getline(usn, 20, '|');
        file2.getline(age, 5, '|');
        file2.getline(sem, 5, '|');
        file2.getline(branch, 5, '\n');

        strcpy(index[i], ind);
        strcpy(rec[i].name, name2);
        strcpy(rec[i].usn, usn);
        strcpy(rec[i].age, age);
        strcpy(rec[i].sem, sem);
        strcpy(rec[i].branch, branch);
    }
    file1.close();
    int flag = -1;
    for (i = 0; i < no; i++)
    {
        if (strcmp(index[i], index2))
        {
            flag = i;
            break;
        }
    }
    if (flag == -1)
    {
        cout << "ERR";
        exit(0);
    }
    if (flag == (no - 1))
    {
        no--;
        cout << "deleted";
        return;
    }
    for (i = 0; i < flag; i++)
    {
        rec[i] = rec[i + 1];
    }
    no--;
    cout << "deleted";
    file1.close();
    file1.open("secindex.txt", ios::out);
    file2.open("record.txt", ios::out);
    for (i = 0; i < no; i++)
    {
        file1 << rec[i].name << "|" << rec[i].usn << "|" << i << "\n";
        file2 << i << "|" << rec[i].name << "|" << rec[i].usn << "|" << rec[i].age << "|" << rec[i].sem << "|" << rec[i].branch << "\n";
    }
    file1.close();
    file2.close();
}

void delete_details(char name[])
{
    fstream file1;
    file1.open("secindex.txt", ios::in);
    int k = 0, i;
    char chusn[20], index[20][20];
    char name2[20], usn[20], age[5], sem[5], branch[5], ind[5];
    for (i = 0; i < no; i++)
    {
        file1.getline(name2, 20, '|');
        file1.getline(usn, 20, '|');
        file1.getline(ind, 5, '\n');
        if (strcmp(name2, name) == 0)
        {
            strcpy(found[k].name, name2);
            strcpy(found[k].usn, usn);
            strcpy(index[k], ind);
            k++;
        }
    }
    file1.close();
    if (k == 1)
    {
        delete_record(index[0]);
        return;
    }
    else
    {
        cout << "Choose USN : ";
        for (i = 0; i < k; i++)
        {
            cout << "\nNAME : " << found[i].name << "\t USN : " << found[i].usn << "\n";
        }
    }
    cin >> chusn;
    for (i = 0; i < k; i++)
    {
        if (strcmp(chusn, found[i].usn) == 0)
        {
            delete_record(index[i]);
            return;
        }
    }
    cout << "invalid entry\n";
    return;
}

int main()
{
    fstream file1, file2;
    char name[20], usn[20], age[5], sem[5], branch[5], ind[5];
    int i, flag, flag1, choice;
    while (1)
    {
        cout << "Enter choice\n";
        cout << "\n1.Add";
        cout << "\n2.search";
        cout << "\n3.delete";
        cout << "\n4.display";
        cout << "\n5.exit\n";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter no of students \n";
            cin >> no;
            for (i = 0; i < no; i++)
            {
                cout << "\nName : ";
                cin >> rec[i].name;
                cout << "\n usn : ";
                cin >> rec[i].usn;
                cout << "\n age : ";
                cin >> rec[i].age;
                cout << "\n sem : ";
                cin >> rec[i].sem;
                cout << "\n branch : ";
                cin >> rec[i].branch;
            }
            sortfile();
            indexfile();
            break;

        case 2:
            file1.open("secindex.txt", ios::in);
            if (!file1)
            {
                cout << "\nerr";
                exit(0);
            }
            cout << "enter name to search\n";
            cin >> st_name;
            flag = 0;
            for (i = 0; i < no; i++)
            {
                file1.getline(name, 20, '|');
                file1.getline(usn, 20, '|');
                file1.getline(ind, 4, '\n');
                if (strcmp(name, st_name) == 0)
                {
                    retrieve_details(name);
                    flag = i + 1;
                    break;
                }
            }
            if (!flag)
            {
                cout << "SEARCh err";
            }
            file1.close();
            break;

        case 3:
            file1.open("secindex.txt", ios::in);
            if (!file1)
            {
                cout << "\nerr";
                exit(0);
            }
            cout << "enter name to delete\n";
            cin >> st_name;
            flag = 0;
            for (i = 0; i < no; i++)
            {
                file1.getline(name, 20, '|');
                file1.getline(usn, 20, '|');
                file1.getline(ind, 4, '\n');
                if (strcmp(name, st_name) == 0)
                {
                    delete_details(name);
                    flag = i + 1;
                    break;
                }
            }
            if (!flag)
            {
                cout << "SEARCh err";
            }
            file1.close();
            break;
        case 4:
            cout << "USN\tNAME\tAGE\tSEM\tBRANCH\n";
            for (i = 0; i < no; i++)
            {
                cout << rec[i].usn << "\t" << rec[i].name << "\t" << rec[i].age << "\t" << rec[i].sem << "\t" << rec[i].branch << "\n";
            }
            break;
        case 5:
            exit(0);
        default:
            break;
        }
    }
}